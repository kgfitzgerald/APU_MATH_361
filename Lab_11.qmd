---
title: "Lab 11 / CLT R Activity"
subtitle: "MATH 361"
author: "Insert your name here"
date: "Insert due date here"
format: 
  html:
    self-contained: true
    toc: true
    toc_float: true
    number-section: false
    highlight: tango
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Let's look at some real data to demonstrate the CLT. We will be taking random samples

## Load packages

We first need to load the `dslabs`, `infer`, and `tidyverse` packages using the `library()` command. You likely need to install the `dslabs` and `infer` packages since it is your first time using them. You can do this by running `install.packages(c("dslabs", "infer"))` in the console.

```{r, message = FALSE}
library(dslabs)
library(infer)
library(tidyverse)
```

## Setting a seed

We will take some random samples and build sampling distributions in this lab. To make sure your results stay consistent each time you knit, we need to *set a seed.*

### Task 0

Change the value "1234" below to your favorite number.

```{r}
set.seed(1234)
```

## Prepare the data

We can load a dataset called `gapminder` that contains data on 185 countries from the years 1960 to 2016. We are going to consider the distribution of the variable `fertility`, which gives the average number of children per woman for each country.

```{r}
data("gapminder", package = "dslabs") 
```

Let's first `filter` the data to keep only the year 2013 (more recent years have some missing data).

```{r}
gapminder_2013 <- gapminder %>% 
  filter(year == 2013)
```

## Explore the data

Let's create a histogram of `fertility` across the 185 countries. We will consider this our population.

```{r}
ggplot(gapminder_2013) +
  geom_histogram(aes(x = fertility), color = "white")  +
  xlab("Fertility (babies per woman)") +
  ylab("Number of countries")
```

We can see that this is a right-skewed distribution. The mean and variance of the distribution are:

```{r}
mu <- mean(gapminder_2013$fertility)
sigma2 <- var(gapminder_2013$fertility)

data.frame(mu, sigma2)
```

## Take a random sample

The function `sample_n()` let's us take a random sample of rows from a dataset. Let's use it to draw a random sample of 10 countries. We'll save this sample data into an object called `samp10`

```{r}
samp10 <- gapminder_2013 %>% 
  sample_n(10)
```

### Task 1

Inspect your data to see what 10 countries ended up in your sample. List 3 of the countries below.

> YOUR ANSWER HERE

Compare your sample to your neighbors.

### Task 2

Compute the mean `fertility` in your sample. Instead of calling the mean `mu`, you should now call it `xbar` since it is being computed from a sample.

```{r}

```

Compare your sample mean to your neighbor's.

### Task 3

Take another random sample of size 10 and compute the mean.

```{r}

```

How does it compare to your first sample?

> YOUR ANSWER HERE

## Take many random samples

We can utilize a for loop to take *many* random samples. Since we're only interested in the `fertility` variable, we can work with it as a vector instead of having to deal with the whole data frame. The function `sample()` is faster than `sample_n()` because it draws random elements from a vector rather than random rows from a data frame. The code below takes 10,000 random samples of size 10 from the `gapminder_2013` dataset.

```{r}
xbar <- c() #initialize an empty vector to store sample means
for(i in 1:10000){
  #take random sample of size 10
  sample_data <- sample(gapminder_2013$fertility, 
                        size = 10)
  #compute mean fertility for the random sample
  #store it in position i of the vector xbar
  xbar[i] <- mean(sample_data)
}

#convert xbar to a data frame for plotting
#add variable n to indicate sample size of each sample
sims_n10 <- data.frame(xbar,
                       n = 10)

#create histogram of sampling distribution for xbar
ggplot(sims_n10, aes(x = xbar)) +
  geom_histogram()
```

### Task 4

Is the distribution symmetric or skewed?

> YOUR ANSWER HERE

### Task 5

Compute the mean and variance of the 10,000 sample means.

```{r}

```

What would you expect these values to be, based on the Central Limit Theorem?

> YOUR ANSWER HERE

### Task 6

Copy, paste, and tweak the code above Task 4 (twice) to generate 10,000 samples of size 30 and 10,000 samples of size 100. Save the results of the 10,000 means in the data frames `sims_n30` and `sims_n100` respectively. *Hint: the code need to change everywhere that 10 appears*

```{r}

```

## Compare sampling distributions as n changes

The following code combines the 3 sampling distribution data frames and plots them on a single plot. *Remove the line with `eval: false` from the code chunk to get the histogram to show in the .html file.*

```{r}
#| eval: false
all_samples <- bind_rows(sims_n10, 
                         sims_n30,
                         sims_n100)

ggplot(all_samples) +
  geom_histogram(aes(x = xbar), 
                 color = "white", bins = 50) +
  facet_wrap(~n, ncol = 1, scales = "free_y") +
  xlab("Mean Fertility") +
  ylab("Number of samples")
```

### Task 7

What happens to the sampling distribution of the sample means as $n$ increases? Comment on the shape, center, and spread of the distributions (as seen in the histograms).

> YOUR ANSWER HERE

### Task 8

The following coded uses the `all_samples` data frame to compute the mean and variance of the sample means for all three sampling distributions. *Remove the line with `eval: false` from the code chunk to get the histogram to show in the .html file.*

```{r}
#| eval: false
all_samples %>% 
  group_by(n) %>% 
  summarize(Exbar = mean(xbar),
            Vxbar = var(xbar))
```

Comment on the results.

> YOUR ANSWER HERE

How do they compare with the results you would expect from the CLT?

> YOUR ANSWER HERE

## Sample variance

In this section, we will demonstrate why the formula for $s^2$ divides by $n-1$ instead of $n$.

Recall that the we computed the population variance of fertility above to be `r sigma2`. Suppose we don't have access to this population level data and instead only have data on a random sample of 5 countries. This means we don't know $\sigma^2$ but have to estimate it, just like we had to estimate $\mu$. Let's consider two possible ways to estimate $\sigma^2$ from our sample data:

1.  $s^2_n = \frac{\sum_{i = 1}^n (x_i - \overline{x})^2}{n}$
2.  $s^2 = \frac{\sum_{i = 1}^n (x_i - \overline{x})^2}{n-1}$

Let's draw a random sample of size 5 and compute these two estimates from our sample data.

```{r}
n <- 5
sample_n5 <- sample(gapminder_2013$fertility,
                    size = n)
xbar <- mean(sample_n5)

s2_n <- sum((sample_n5 - xbar)^2) / n
s2 <- sum((sample_n5 - xbar)^2) / (n - 1)
```

Which one is a better estimate of $\sigma^2$? Remember that $s^2_n$ and $s^2$ are both random variables because they are functions of the random variables $x_i$ (the fertility in the randomly selected country $i$). If we were to draw a different random sample, it might be the case that the other estimator gave us a "better" estimate (closer to the true $\sigma^2$). In order to see which one is best in the long-run, let's run 10,000 simulations, by taking 10,000 random samples and computing the two variance estimates in each.

```{r}
s2_n_sims <- c() #initialize empty vectors to store s2_n estimates
s2_sims <- c() #initialize empty vectors to store s2 estimates

n <- 5

for(i in 1:10000){
  #take random sample of size 5
  sample_n5 <- sample(gapminder_2013$fertility,
                    size = n)
  
  #compute mean fertility for the random sample
  xbar <- mean(sample_n5)
  
  #compute sample variance using n on denom
  #store it in position i of the vector s2_n
  s2_n[i] <- sum((sample_n5 - xbar)^2) / n
  
  #compute sample variance using n - 1 on denom
  #store it in position i of the vector s2
  s2[i] <- sum((sample_n5 - xbar)^2) / (n - 1)
}

variances <- data.frame(s2_n, s2)
```

Let's now compute the expected value (average) of each estimator.

```{r}
variances %>% 
  summarize(Es2_n = mean(s2_n),
            Es2 = mean(s2))
```

### Task 9

Which one is closer to the true $\sigma^2$ value?

> YOUR ANSWER HERE

As these results indicate, $s^2_n = \frac{\sum_{i = 1}^n (x_i - \overline{x})^2}{n}$ is a *biased* estimator of $\sigma^2$. In other words, it's expected value is not equal to $\sigma^2$; in the long-run, on average, it does not "hit the target" and estimate the correct value.

Dividing by $n-1$, however, as in $s^2 = \frac{\sum_{i = 1}^n (x_i - \overline{x})^2}{n - 1}$, gets rid of the bias and does "hit the correct target". That is, $E(s^2) = \sigma^2$.

The following histograms show the bias visually:

```{r, echo = FALSE, message = FALSE, warning = FALSE}
ggplot(variances) + 
  geom_histogram(aes(x = s2_n, fill = "red"), 
                 color = "white", alpha = 0.5) +
  geom_histogram(aes(x = s2, fill = "blue"), 
                 color = "white", alpha = 0.5) +
  geom_vline(xintercept = mean(variances$s2_n), 
             color = "red", size = 1) +
  geom_vline(xintercept = mean(variances$s2), 
             color = "blue", linewidth = 1) +
  geom_vline(xintercept = var(gapminder_2013$fertility), 
             linetype = 2, linewidth = 1) +
  scale_fill_manual(name="Estimator", 
                    values = c('blue' = 'blue', 
                               'red' = 'red'),
                    labels = expression(s^2, s[n]^2)) +
  labs(x = "Sample variance estimate",
       y = "Number of samples",
       title = "Sampling distribution of two variances estimators") +
  theme_minimal()
```

### Task 10

What do the three lines on the plot represent (red, blue, dotted black)? Comment on how the plot visually depicts the (un)biasedness of the estimators.

> YOUR ANSWER HERE
