---
title: "Lab 09 / CLT R Activity"
subtitle: "MATH 361"
author: "Insert your name here"
date: "Insert due date here"
format: 
  html:
    self-contained: true
    toc: true
    toc_float: true
    number-section: false
    highlight: tango
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Let's look at some real data to demonstrate the CLT. We will be taking random samples

## Load packages

We first need to load the `dslabs`, `infer`, and `tidyverse` packages using the `library()` command. You likely need to install the `dslabs` and `infer` packages since it is your first time using them. You can do this by running `install.packages(c("dslabs", "infer"))` in the console.

```{r, message = FALSE}
library(dslabs)
library(infer)
library(tidyverse)
```

## Setting a seed

We will take some random samples and build sampling distributions in this lab. To make sure your results stay consistent each time you knit, we need to *set a seed.*

### Task 0

Change the value "1234" below to your favorite number.

```{r}
set.seed(1234)
```

## Prepare the data

We can load a dataset called `gapminder` that contains data on 185 countries from the years 1960 to 2016. We are going to consider the distribution of the variable `fertility`, which gives the average number of children per woman for each country.

```{r}
data("gapminder", package = "dslabs") 
```

Let's first `filter` the data to keep only the year 2013 (more recent years have some missing data).

```{r}
gapminder_2013 <- gapminder %>% 
  filter(year == 2013)
```

## Explore the data

Let's create a histogram of `fertility` across the 185 countries. We will consider this our population.

```{r}
ggplot(gapminder_2013) +
  geom_histogram(aes(x = fertility), color = "white")  +
  xlab("Fertility (babies per woman)") +
  ylab("Number of countries")
```

We can see that this is a right-skewed distribution. The mean and variance of the distribution are:

```{r}
gapminder_2013 %>% 
  summarize(mu = mean(fertility),
            sigma2 = var(fertility))
```

## Take a random sample

The function `sample_n()` let's us take a random sample of rows from a dataset. Let's use it to draw a random sample of 10 countries. We'll save this sample data into an object called `samp10`

```{r}
samp10 <- gapminder_2013 %>% 
  sample_n(10)
```

### Task 1

Inspect your data to see what 10 countries ended up in your sample. List 3 of the countries below.

> YOUR ANSWER HERE

Compare your sample to your neighbors.

### Task 2

Compute the mean `fertility` in your sample by copying, pasting, and tweaking the code above for computing the mean and variance in the population. Instead of calling the mean `mu`, you should now call it `xbar` since it is being computed from a sample.

```{r}

```

Compare your sample mean to your neighbor's.

### Task 3

Take another random sample of size 10 and compute the mean.

```{r}

```

How does it compare to your first sample?

> YOUR ANSWER HERE

## Take many random samples

R allows us to draw many random samples, so we can construct the sampling distribution of the sample mean. The function `rep_sample_n()` helps us do this. The code below takes 5 random samples of size 10 from the `gapminder_2013` dataset.

```{r}
five_samples <- rep_sample_n(gapminder_2013, size = 10, 
                            reps = 5, replace = TRUE)
five_samples
```

The resulting dataset (`five_samples`) has 50 rows (10 rows for each of the 5 samples), and a new column `replicate` that indicates which sample (1 - 5) the data belongs to. Inspect it in your Environment.

If we want to compute the mean `fertility` for each sample, we can utilize the `group_by()` function.

```{r}
five_samples %>% 
  group_by(replicate) %>% 
  summarise(xbar = mean(fertility)) %>% 
  mutate(n = 10)
```

In English, the code above says to take the dataset `five_samples` "and then" `group by` the variable `replicate` "and then" `summarize` the data (by group) by computing the mean fertility "and then" `mutate` the dataset by adding a new column `n` to specify the sample size for each sample.

## Inspect the sampling distribution

### Task 4

Combine and adapt the code in the previous two code chunks to draw 10,000 random samples and compute the means in each. Save the results of the 10,000 sample means into an object called `sampling_dist_n10`.

```{r}

```

Verify that your `sampling_dist_n10` data frame has 10,000 rows and 3 columns before continuing.

### Task 5

Plot a histogram of the 10,000 sample means stored in `sampling_dist_n10`

```{r}

```

Is the distribution symmetric or skewed?

> YOUR ANSWER HERE

### Task 6

Compute the mean and variance of the 10,000 sample means.

```{r}

```

What would you expect these values to be, based on the Central Limit Theorem?

> YOUR ANSWER HERE

### Task 7

Copy, paste, and tweak the code from Task 4 (twice) to generate 10,000 samples of size 30 and 10,000 samples of size 100. Save the results of the 10,000 means in the objects `sampling_dist_n30` and `sampling_dist_n100` respectively.

```{r}

```

## Compare sampling distributions as n changes

The following code combines the 3 sampling distribution data frames and plots them on a single plot. *Remove the line with `eval: false` from the code chunk to get the histogram to show in the .html file.*

```{r}
#| eval: false
all_samples <- bind_rows(sampling_dist_n10, sampling_dist_n30,
                         sampling_dist_n100)

ggplot(all_samples) +
  geom_histogram(aes(x = mean_fertility), color = "white", bins = 50) +
  facet_wrap(~n, ncol = 1, scales = "free_y") +
  xlab("Mean Fertility") +
  ylab("Number of samples")
```

### Task 8

What happens to the sampling distribution of the sample means as $n$ increases? Comment on the shape, center, and spread of the distributions (as seen in the histograms).

> YOUR ANSWER HERE

### Task 9

Use the `all_samples` data frame to compute the mean and variance of the sample means for all three sampling distributions. *Hint: Copy, paste, tweak your code from Task 6 but add the line `group_by(n) %>%` before you `summarize()`*

```{r}

```

Comment on the results.

> YOUR ANSWER HERE

How do they compare with the results you would expect from the CLT?

> YOUR ANSWER HERE
